				hardware absreact layer
				
	APK			①加载动态库		②声明native方法
(java代码)				|			③调用nativa的方法open_dev(其实是调用JNI层实现的cpp代码)
			------------|--------------------|-----------------------------------------
						|					 |			  -> led_open()
	JNI				OnLoad()				 |			  |	{
(c/c++代码)			{       				 |			  |		①加载hal动态库(hw_get_module),顺便得到module指针
					得到env				     |			  |		②通过module指针,调用module_open,得到device指针.	
					env->rgst(映射表)注册到 DVM	----------|			| ③最终才是真的打开device->open_dev();
					}(DVM就得到java方法和c函数的映射关系)	 }		|				|
			--------------------------------------------------------|---------------|---
				 module_open()<--------------------------------------				|
	HAL			{ 实例化一个device,						hal_open_dev()<--------------
  (c代码)		  初始化它,给它赋值,				   {
				  *device = mydevice;					  fd = open("/dev/设备");
				}									   }			|
			--------------------------------------------------------|-------------------
													  到内核找到驱动|					
	内核					fop: open = led_drv_open();				|
								write = led_drv_write();	<--------
			----------------------------------------------------------------------------	
				
				
九、Android的HAL层:
	1.硬件抽象层存在的意义:
	(1).将操作硬件差异化代码封装在此.
	(2).规避GPL的限制,保护硬件厂商的核心代码.
		(屏蔽GPL的传染性,JNI层调用HAL层的时候,传递的是指针,所以严格意义上,代码执行的空间是在HAL层,所以JNI不必遵循GPL)
	2.新的hal的模板:
		hardware/libhardware/gps		
		(还有个旧的:hardware/libhardware_legacy)
	
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		